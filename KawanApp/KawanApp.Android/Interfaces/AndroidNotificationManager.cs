using System;
using System.Text.RegularExpressions;
using Android.App;
using Android.Content;
using Android.Graphics;
using Android.OS;
using Android.Support.V4.App;
using KawanApp.Interfaces;
using Xamarin.Forms;
using AndroidApp = Android.App.Application;

[assembly: Dependency(typeof(KawanApp.Droid.Interfaces.AndroidNotificationManager))]
namespace KawanApp.Droid.Interfaces
{
    public class AndroidNotificationManager : INotificationManager
    {
        const string channelIdMessage = "messages";
        const string channelIdFriends = "friends";
        const string channelIdActivities = "activities";
        const int pendingIntentId = 0;

        public const string TitleKey = "title";
        public const string MessageKey = "message";
        public int NumberOfMessages = 0;
        public int NumberOfFriendNoties = 0;
        public int NumberOfActivityNoties = 0;

        bool messagesChannelInitialized = false;
        bool friendsChannelInitialized = false;
        bool activitiesChannelInitialized = false;
        string titleMessage = "Message Received";
        string titleFriend = "Friend Request";
        string titleActivity = "Activity Logged";
        string cumulativeMessage = "";
        string cumulativeFriendNoti = "";
        string cumulativeActivityNoti = "";
        NotificationManager manager;

        public event EventHandler NotificationReceived;

        public void Initialize()
        {
            CreateNotificationChannel("messages", "Messages", "The channel for chat messages.");
            CreateNotificationChannel("friends", "Friends", "The channel for friend requests getting received and accepted.");
        }

        public int ScheduleMessageNotification(string user, string message)
        {
            int messageId = 0; //Id for messages notification channel
            if (!messagesChannelInitialized)
            {
                CreateNotificationChannel("messages", "Messages", "The channel for chat messages.");
            }

            NumberOfMessages++;
            cumulativeMessage = BuildMessage(user + ": " + message);

            //messageId++; //Muted so that only one notification is generated by the app for each channel.

            Intent intent = new Intent(AndroidApp.Context, typeof(MainActivity));
            intent.PutExtra(TitleKey, titleMessage);
            intent.PutExtra(MessageKey, cumulativeMessage);

            PendingIntent pendingIntent = PendingIntent.GetActivity(AndroidApp.Context, pendingIntentId, intent, PendingIntentFlags.OneShot);

            NotificationCompat.Builder builder = new NotificationCompat.Builder(AndroidApp.Context, channelIdMessage)
                .SetContentIntent(pendingIntent)
                .SetContentTitle(titleMessage)
                .SetStyle(new NotificationCompat.BigTextStyle().BigText(cumulativeMessage).SetBigContentTitle(titleMessage))
                .SetContentText(cumulativeMessage)
                .SetLargeIcon(BitmapFactory.DecodeResource(AndroidApp.Context.Resources, Resource.Drawable.logokawan))
                .SetSmallIcon(Resource.Mipmap.ic_launcher)
                .SetDefaults((int)NotificationDefaults.All)
                .SetPriority((int)NotificationImportance.Max)
                .SetChannelId(channelIdMessage);

            Notification notification = builder.Build();
            manager.Notify(messageId, notification);

            return messageId;
        }

        public int ScheduleFriendNotification(string user, string message)
        {
            int messageId = 1; //Id for friends notification channel
            if (!friendsChannelInitialized)
            {
                CreateNotificationChannel("friends", "Friends", "The channel for friend requests getting received and accepted.");
            }

            NumberOfFriendNoties++;
            cumulativeFriendNoti = BuildFriendNoti(message); //e.g. message: sent you a friend request!

            //messageId++; //Muted so that only one notification is generated by the app for each channel.

            Intent intent = new Intent(AndroidApp.Context, typeof(MainActivity));
            intent.PutExtra(TitleKey, titleFriend);
            intent.PutExtra(MessageKey, cumulativeFriendNoti);

            PendingIntent pendingIntent = PendingIntent.GetActivity(AndroidApp.Context, pendingIntentId, intent, PendingIntentFlags.OneShot);

            NotificationCompat.Builder builder = new NotificationCompat.Builder(AndroidApp.Context, channelIdFriends)
                .SetContentIntent(pendingIntent)
                .SetContentTitle(titleFriend)
                .SetStyle(new NotificationCompat.BigTextStyle().BigText(cumulativeFriendNoti).SetBigContentTitle(titleFriend))
                .SetContentText(cumulativeFriendNoti)
                .SetLargeIcon(BitmapFactory.DecodeResource(AndroidApp.Context.Resources, Resource.Drawable.logokawan))
                .SetSmallIcon(Resource.Mipmap.ic_launcher)
                .SetDefaults((int)NotificationDefaults.All)
                .SetPriority((int)NotificationImportance.Max)
                .SetChannelId(channelIdFriends);

            Notification notification = builder.Build();
            manager.Notify(messageId, notification);

            return messageId;
        }

        public int ScheduleActivityNotification(string sendingUserFirstName)
        {
            int messageId = 2; //Id for activity notification channel
            if (!activitiesChannelInitialized)
            {
                CreateNotificationChannel("activities", "Activities", "The channel for activities that were recently logged.");
            }

            NumberOfActivityNoties++;
            cumulativeActivityNoti = BuildActivityNoti(sendingUserFirstName + " logged an activity involving you."); //e.g. message: logged an activity involving you.

            //messageId++; //Muted so that only one notification is generated by the app for each channel.

            Intent intent = new Intent(AndroidApp.Context, typeof(MainActivity));
            intent.PutExtra(TitleKey, titleActivity);
            intent.PutExtra(MessageKey, cumulativeActivityNoti);

            PendingIntent pendingIntent = PendingIntent.GetActivity(AndroidApp.Context, pendingIntentId, intent, PendingIntentFlags.OneShot);

            NotificationCompat.Builder builder = new NotificationCompat.Builder(AndroidApp.Context, channelIdActivities)
                .SetContentIntent(pendingIntent)
                .SetContentTitle(titleActivity)
                .SetStyle(new NotificationCompat.BigTextStyle().BigText(cumulativeActivityNoti).SetBigContentTitle(titleActivity))
                .SetContentText(cumulativeActivityNoti)
                .SetLargeIcon(BitmapFactory.DecodeResource(AndroidApp.Context.Resources, Resource.Drawable.logokawan))
                .SetSmallIcon(Resource.Mipmap.ic_launcher)
                .SetDefaults((int)NotificationDefaults.All)
                .SetPriority((int)NotificationImportance.Max)
                .SetChannelId(channelIdActivities);

            Notification notification = builder.Build();
            manager.Notify(messageId, notification);

            return messageId;
        }

        public int RemoveNotification(int messageId, string user)
        {
            switch (messageId)
            {
                case 0: //Messages
                    //Not fully implemented yet.
                    NumberOfMessages--;
                    break;
                case 1: //Friend requests
                    int previousLength = cumulativeFriendNoti.Length;
                    cumulativeFriendNoti = Regex.Replace(cumulativeFriendNoti, "\n" + user + " sent you a friend request.", ""); //Try removing if there's a new line first
                    cumulativeFriendNoti = Regex.Replace(cumulativeFriendNoti, user + " sent you a friend request.", ""); //Remove the notification if it doesn't have a new line 
                    if(NumberOfFriendNoties > 0 && previousLength > cumulativeFriendNoti.Length)
                        NumberOfFriendNoties--;

                    if(!string.IsNullOrEmpty(cumulativeFriendNoti))
                        if (cumulativeFriendNoti.Substring(0, 1) == "\n")
                            cumulativeFriendNoti = cumulativeFriendNoti.Substring(1, cumulativeFriendNoti.Length-1); //Remove the new line at the start.


                    Intent intent = new Intent(AndroidApp.Context, typeof(MainActivity));
                    intent.PutExtra(TitleKey, titleFriend);
                    intent.PutExtra(MessageKey, cumulativeFriendNoti);

                    PendingIntent pendingIntent = PendingIntent.GetActivity(AndroidApp.Context, pendingIntentId, intent, PendingIntentFlags.OneShot);

                    NotificationCompat.Builder builder = new NotificationCompat.Builder(AndroidApp.Context, channelIdMessage)
                        .SetContentIntent(pendingIntent)
                        .SetContentTitle(titleFriend)
                        .SetContentText(cumulativeFriendNoti)
                        .SetLargeIcon(BitmapFactory.DecodeResource(AndroidApp.Context.Resources, Resource.Drawable.logokawan))
                        .SetSmallIcon(Resource.Mipmap.ic_launcher)
                        .SetPriority((int)NotificationImportance.Min)
                        .SetChannelId(channelIdMessage)
                        .SetStyle(new NotificationCompat.BigTextStyle().BigText(cumulativeFriendNoti).SetBigContentTitle(titleFriend));

                    Notification notification = builder.Build();
                    if (string.IsNullOrEmpty(cumulativeFriendNoti))
                        manager.Cancel(messageId);
                    else
                        manager.Notify(messageId, notification);
                    break;
            }

            return messageId;
        }

        public void ClearMessageNotifications()
        {
            manager.Cancel(0);
        }

        public void ClearFriendNotifications()
        {
            manager.Cancel(1);
        }

        public void ClearActivityNotifications()
        {
            manager.Cancel(2);
        }

        public void ClearAllNotifications()
        {
            manager.Cancel(0);
            manager.Cancel(1);
            manager.Cancel(2);
        }

        public void ReceiveNotification(string title, string message)
        {
            var args = new NotificationEventArgs()
            {
                Title = title,
                Message = message,
            };
            NotificationReceived?.Invoke(null, args);
        }

        string BuildMessage(string currentMessage)
        {
            if (NumberOfMessages == 0)
                return "";
            else if(NumberOfMessages == 1)
            {
                titleMessage = "Message Received";
                return cumulativeMessage += currentMessage;
            }
            else
            {
                titleMessage = "Messages Received"; //Plural for more than 1
                return cumulativeMessage += "\n" + currentMessage;
            }
        }

        string BuildFriendNoti(string currentFriendNoti)
        {
            if (NumberOfFriendNoties == 0)
                return "";
            else if (NumberOfFriendNoties == 1)
            {
                titleFriend = "Friend Request";
                return cumulativeFriendNoti += currentFriendNoti;
            }
            else
            {
                titleFriend = "Friend Requests"; //Plural for more than 1
                return cumulativeFriendNoti += "\n" + currentFriendNoti;
            }
        }

        string BuildActivityNoti(string currentActivityNoti)
        {
            if (NumberOfActivityNoties == 0)
                return "";
            else if (NumberOfActivityNoties == 1)
            {
                titleFriend = "Activity Logged";
                return cumulativeActivityNoti += currentActivityNoti;
            }
            else
            {
                titleFriend = "Activities Logged"; //Plural for more than 1
                return cumulativeActivityNoti += "\n" + currentActivityNoti;
            }
        }

        void CreateNotificationChannel(string channelId, string channelName, string channelDescription)
        {
            manager = (NotificationManager)AndroidApp.Context.GetSystemService(AndroidApp.NotificationService);

            if (Build.VERSION.SdkInt >= BuildVersionCodes.O)
            {
                var channelNameJava = new Java.Lang.String(channelName);
                var channel = new NotificationChannel(channelId, channelNameJava, NotificationImportance.Max)
                {
                    Description = channelDescription
                };
                manager.CreateNotificationChannel(channel);
            }

            switch(channelId)
            {
                case "messages":
                    messagesChannelInitialized = true;
                    break;
                case "friends":
                    friendsChannelInitialized = true;
                    break;
            }
            
        }
    }
}